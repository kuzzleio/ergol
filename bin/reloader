#!/usr/bin/env node

/*
 * Kuzzle, a backend software, self-hostable and ready to use
 * to power modern apps
 *
 * Copyright 2015-2021 Kuzzle
 * mailto: support AT kuzzle.io
 * website: http://kuzzle.io
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-console */

'use strict';

const path = require('path');
const yargs = require('yargs');
const run = require('../src');
const { isPlainObject } = require('../src/utils');
const defaultConfig = require('../src/defaultConfig.json');

// Parsing arguments
const args = yargs
  .options({
    'config': {
      alias: 'c',
      describe: 'JSON file containing configuration variables intended to override default ones',
      group: 'General:',
      type: 'string'
    },
    'cwd': {
      alias: 'd',
      default: process.cwd(),
      describe: 'Current Working Directory (if different from your actual cwd)',
      group: 'General:',
      type: 'string'
    },
    'kill-delay': {
      alias: 'k',
      describe: 'Kill the process if it did not stop after this delay',
      group: 'Configuration (override --config):',
      type: 'number'
    },
    'node-args': {
      describe: 'Arguments to pass to the node interpreter',
      group: 'Configuration (override --config):',
      type: 'array'
    },
    'script-args': {
      describe: 'Arguments to pass to the script',
      group: 'Configuration (override --config):',
      type: 'array'
    },
    'watch': {
      alias: 'w',
      describe: 'Array of cwd relative path/to/directories or files to watch',
      group: 'Configuration (override --config):',
      type: 'array'
    },
  })
  .strictOptions(true)
  .usage('USAGE: $0 <script> -c <config> -d <cwd>')
  .parse();

if (args._.length !== 1) {
  console.error('Error: A script to start your project (and reload it when necessary) must be provided\n');
  yargs.showHelp();
  process.exit(1);
}
const script = args._[0];

// Merging configurations: defaultConfig < jsonConfig < Configuration args
let jsonConfig = {};
if (args.config) {
  const configPath = path.join(args.cwd, args.config);
  try {
    jsonConfig = require(configPath);
  }
  catch (error) {
    console.error('Error: Config path is incorrect, it must be relative to your cwd.');
    process.exit(1);
  }
  if (!isPlainObject(jsonConfig)) {
    console.error('Error: Config file must be a JSON object');
    process.exit(1);
  }
}

const config = Object.assign(defaultConfig, jsonConfig, { cwd: args.cwd });
if (args.watch) { config.watch = args.watch; }
if (args['kill-delay']) { config.killDelay = args['kill-delay']; }
if (args['script-args']) { config.scriptArgs = args['script-args']; }
if (args['node-args']) { config.nodeArgs = args['node-args']; }

run(config, script);
